services:
  ##################################
  # Setup Backend (server)
  ##################################
  backend:
    build:
      context: server
      dockerfile: Dockerfile
    image: backend
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    stdin_open: true
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: always
    networks:
      - express-mongo
      - react-express

  ##################################
  # Setup Frontend (client)
  ##################################
  frontend:
    build:
      context: cli
      dockerfile: Dockerfile
    image: frontend
    ports:
      - "3000:3000"
    stdin_open: true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: always
    depends_on:
      - backend
    networks:
      - express-mongo
      - react-express
  ##################################
  # Setup MongoDB
  ##################################
  mongo:
    image: mongo:4.2.0
    volumes:
      - mongo_data:/data/db
    restart: always
    networks:
      - express-mongo
    expose:
      - 2046
#   frontend:
#     build:
#       context: cli
#       target: base
#     ports:
#       - 3000:3000
#     stdin_open: true
#     volumes:
#       - ./frontend:/app
#       - /app/node_modules
#     restart: always
#     depends_on:
#       - backend

#   backend:
#     restart: always
#     build:
#       context: server
#       target: development
#     volumes:
#       - ./backend:/app
#       - /app/node_modules
#     depends_on:
#       - mongo
#     networks:
#       - express-mongo
#       - react-express
#     expose:
#       - 3000

#   mongo:
#     restart: always
#     image: mongo:4.2.0
#     volumes:
#       - mongo_data:/data/db
#     networks:
#       - express-mongo
#     expose:
#       - 2046
# networks:
#   react-express:
#   express-mongo:

# volumes:
#   mongo_data:
